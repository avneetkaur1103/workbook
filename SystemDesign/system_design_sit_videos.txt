#------------- SIT WhatsApp -------------- 
Messaging Service - WhatsApp
Don't dive into directly  | - As interviewer always leaves ambiguity to test how you ask questions to clarify.
Q1: Features => Ask for what features they need & derive architecture bases on that
A. One-to-One ?
B. Text only ?
C. Push Notifications ?
D. Send/Receive Confirmation ?
E. Group chat
Skips: 
Can't design the whole thing in small interview, skip not-so-defining-feature(non core services) functions like Profile/Login/Registration.

Architecture features:
3 division which controls the design => scale/ functionality(connection/message delivery)/ data
	1. Scalable: Horizontal scaling (gives us the toppology) => bcz large system (Q:how should the path be traced from one person to another in selected topology?)
	2. Async Communication => not using long polling or websocket => GCM XMPP CCS server for msg push
	3. Data storage: where all should the data be stored @server, @global DB or @device & how should they be partitioned => can be derived from algorithm/functional needs

Design a basic HLD with above contraints & further elaborate some components.

One you design the HLD, Ask if interview wants you to get into Data Design(Table)/LLD(Classes).
If LLD is discussed ask if Algorithm design needs to be discussed.

# ----------- XMPP ---------------------
XMPP vs Websockets:
XMPP = open standard communications protocol for message-oriented middle-ware(like - Google CCS) based on XML.
XMPP is a set of application protocol for doing real-time chat, it then has to be transported across the network somehow, so you need a transport binding. There are three main transport bindings for XMPP. TCP/IP, which is what one usually uses on the Internet with native clients on devices. HTTP (called BOSH), which is what one has traditionally used when using XMPP in the browser (as TCP-IP isn't available to Javascript apps in the browser)

Websockets, which is one one uses when doing XMPP in a modern browser.
So if you're developing a chat application in a browser, you'd choose XMPP as the application protocol and you'd use websockets (in a modern browser) or BOSH (in an older browser) as the network transport.

You can't use 'just websockets' for chat - you can use websockets without XMPP, but what this really means is that you're inventing your own application-layer protocol for chat, and the odds are you're going to save a lot of time and headaches by taking advantage of the work that's already gone into writing one with useful properties (security, identity, extensibility etc.) and for which there are existing libraries and servers by going XMPP instead.

Websockets has sticky session.

# ---------- SIT Twitter ------------------
Q1: Feature & Scale?
1. Twitting
2. TimeLine => Simple tweets from you & people you follow
3. Following
4. Search - optional -> build indexes when searched

Architecture Overview:
The functionality seems simple - major focus is going to be on how above feature works with scale & how is the data store to support that(algorithm & partitioning)?
Read Heavy => caches can do
eventual consistency => caches and DB can do/(or, No sql db alternatively if we don't want search or join?)

Data -> RDBMS for faster queries, joins & fast search data + available & consistent(though eventual consistency will here but we need joins & indexes so..)

Scale -> Timeline cache for each user on redis right after LB then application server which would update cache when anytime line is requested for eventual consistency.
We will have replicas of cache shards and they need to updated to be in sync => fault tolerance
Master-Slave cache shards => load balancing.
DB-Cache Partitioning => TweetID for balanced storage. Master-Slave for load balancing.

Limitation of fan out - Celebrity tweet may fan out to millions of cache entries and it may take time to for the cache to be consistent(eventual consistency). But if our DB query for latest timeline may produces results earlier and we can update timeline and cache effectively make consistency faster. So => timeline cache(push) + sql queried timeline results(pull).
fan out directly provide efficient push notifications content.
