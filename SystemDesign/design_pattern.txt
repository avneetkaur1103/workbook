Creational design patterns:
---------------------------
These design patterns are all about class instantiation. This pattern can be further divided into class-creation patterns and object-creational patterns.

1. Factory Method - Creates an instance of several derived classes. Factory Method lets a class defer instantiation to subclasses.
Intent
------
	1. Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.
	2. Defining a "virtual" constructor.
	3. The new operator considered harmful. => life cycle control
Problem:
--------
A framework needs to standardize the architectural model for a range of applications, but allow for individual applications to define their own domain objects and provide for their instantiation. => Factory is often clubbed with providers in framework to work with it flexibly.

	class Stooge
	{
	  public:
	    // Factory Method
	    static Stooge *make_stooge(int choice); => factory method in Base class
	    virtual void slap_stick() = 0;
	};

	Stooge *Stooge::make_stooge(int choice)
	{
	  if (choice == 1)
	    return new Larry;
	  else if (choice == 2)
	    return new Moe;
	  else
	    return new Curly;
	}
	int main(){
		vector<Stooge*> roles;	
		roles.push_back(Stooge::make_stooge(choice));
	}
2.Abstract Factory Design Pattern:
----------------------------------
Intent:
-------
Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
A hierarchy that encapsulates: many possible "platforms", and the construction of a suite of "products".

Problem:
-------
If an application is to be portable, it needs to encapsulate platform dependencies. These "platforms" might include: windowing system, operating system, database, etc. Too often, this encapsulation is not engineered in advance, and lots of #ifdef case statements with options for all currently supported platforms begin to procreate like rabbits throughout the code.
	
	class Widget {
	 public:
	  virtual void draw() = 0;
	};

	class LinuxButton : public Widget {
	  void draw() { //draw }
	};
	class LinuxMenu : public Widget {
	 void draw() { //draw }
	};

	class WindowsButton : public Widget {
		void draw() { //draw }
	};
	class WindowsMenu : public Widget {
		void draw() { //draw }
	};

	// Abstract Factory
	class Factory {
	 public:
	  virtual Widget *create_button() = 0;
	  virtual Widget *create_menu() = 0;
	};

	class LinuxFactory : public Factory { => Platform 1 implementation of factory
	 public:
	  Widget *create_button() {
	    return new LinuxButton;
	  }
	  Widget *create_menu() {
	    return new LinuxMenu;
	  }
	};


	class WindowsFactory : public Factory { => Platform 2 implementation of factory
	 public:
	  Widget *create_button() {
	    return new WindowsButton;
	  }
	  Widget *create_menu() {
	    return new WindowsMenu;
	  }
	};

	int main(){
		Factory *factory;
		Widget *w = factory->create_button(); => no platform specific if else
		w->draw();
	}

Observation:
Abstract factory in case of multiple implementation of factory.
Factories can be be internally using prototype or singleton.

3. Builder - Build complex object in phases & define different builders instead of factory for different platform and implementation.
	class DistrWorkPackage
	{
	  public:
	    DistrWorkPackage(char *type)
	    {
	        sprintf(_desc, "Distributed Work Package for: %s", type);
	    }
	    void setFile(char *f, char *v)
	    {
	        sprintf(_temp, "\n  File(%s): %s", f, v);
	        strcat(_desc, _temp);
	    }
	    void setQueue(char *q, char *v)
	    {
	        sprintf(_temp, "\n  Queue(%s): %s", q, v);
	        strcat(_desc, _temp);
	    }
	    private:
	    	char _desc[200], _temp[80];
	};
	class Builder
	{
	  public:
	    virtual void configureFile(char*) = 0;
	    virtual void configureQueue(char*) = 0;
	    DistrWorkPackage *getResult()
	    {
	        return _result;
	    }
	  protected:
	    DistrWorkPackage *_result;
	};

	class UnixBuilder: public Builder
	{
	  public:
	    UnixBuilder()
	    {
	        _result = new DistrWorkPackage("Unix");
	    }
	    void configureFile(char *name)
	    {
	        _result->setFile("flatFile", name);
	    }
	    void configureQueue(char *queue)
	    {
	        _result->setQueue("FIFO", queue);
	    }
	};

	class VmsBuilder: public Builder
	{
	  public:
	    VmsBuilder()
	    {
	        _result = new DistrWorkPackage("Vms");
	    }
	    void configureFile(char *name)
	    {
	        _result->setFile("ISAM", name);
	    }
	    void configureQueue(char *queue)
	    {
	        _result->setQueue("priority", queue);
	    }
	};

	class Reader
	{
	  public:
	    void setBuilder(Builder *b)
	    {
	        _builder = b;
	    }
	    void construct(PersistenceAttribute[], int);
	  private:
	    Builder *_builder;
	};

	void Reader::construct(PersistenceAttribute list[], int num)
	{
	  for (int i = 0; i < num; i++)
	    if (list[i].type == File)
	      _builder->configureFile(list[i].value);
	    else if (list[i].type == Queue)
	      _builder->configureQueue(list[i].value);
	}

4. Object Pool: Store a predefined size of object stack and return when required.
5. Prototype : clone object for easy creation and reduce initial configs. Can be used with factory. Manages shared resource like shared_ptr across all object created.

	class Factory {
	public:
	   static Stooge* make_stooge( int choice );
	private:
	   static Stooge* s_prototypes[4];
	};
	static Stooge* Factory::s_prototypes[] = {0, new Larry, new Moe, new Curly};
	Stooge* Factory::make_stooge( int choice ) {
	   return s_prototypes[choice]->clone();
	}

6. Singleton Design Pattern:
Intent:
------
Ensure a class has only one instance, and provide a global point of access to it.
Encapsulated "just-in-time initialization" or "initialization on first use".
Problem:
--------
Application needs one, and only one, instance of an object. Additionally, lazy initialization and global access are necessary.
	class Singleton
	{
	  private:
	    int m_value;
	    static Singleton *s_instance;
	    Singleton(){}
	  public:
	    static Singleton *instance()
	    {
	        if (!s_instance)
	          s_instance = new Singleton;
	        return s_instance;
	    }
	};
