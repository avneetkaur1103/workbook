Design Patterns vs OOAD:

DP: Patterns, as reusable solutions for problems, can be found in many fields. The idea of using a pattern language to communicate these solutions originates from the field of architecture but has later been applied successfully to software engineering.

OOAD:Some of the creational patterns deal specifically with objects, but almost all other patterns can be implemented in any non object oriented language.For examples in C, see state pattern, strategy pattern and observer pattern.

OOAD:
Find out, whether we are violating any design principle and compromising the flexibility of code, but again as nothing is perfect in this world, don’t always try to solve the problem with design patterns and design principle they are mostly for large enterprise project which has longer maintenance cycle.

S.O.L.I.D. STANDS FOR:
S — Single responsibility principle
O — Open closed principle
L — Liskov substitution principle
I — Interface segregation principle
D — Dependency Inversion principle

1. SRP - A class should have one and only one reason to change, meaning that a class should only have one job.
	class Circle{
		int r;
		Circle(int r):r{r}{}
	}
	class Square{
		int h, w;
		Square(int h, int w):h{h}, w{w}{}
	}

	void sum(Shapes* shapes){
		for(auto s: shapes){
			if((shape = dynamic_cast<Circle*> s)!= nullptr) => violates open-close principle, every new shape addition will call for a modification here
				sum += 2.PI.shape.r; => not coded to interface violates open close principle.
			else if((shape = dynamic_cast<Square*> s)!= nullptr)
				sum += shape.width*shape.h

		formatted_json_output() => This shouldn't be here, formatting & printing is not a part of this functions responsibility.
	}

2.Open-closed Principle - Objects or entities should be open for extension, but closed for modification.
	class Shape{
		int area() = 0;
	}

	class Circle{
		int r;
		Circle(int r):r{r}{}
	}

	void sum(Shapes* shapes){
		for(auto s: shapes){
			sum += s.area(); => GOOD now coded to interface
	}

3.Liskov substitution principle - Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T.

	class Circle{
		int r;
		Circle(int r):r{r}{}
		int area() = delete; => reduced the functionality of base class, should not happen
	}

4. Interface segregation principle - A client should never be forced to implement an interface that it doesn’t use or clients shouldn’t be forced to depend on methods they do not use.This happens mostly when one interface contains more than one functionality, and the client only needs one functionality and no other. => No fat interface

class Shape{
		int area() = 0;
		int volume() = 0; => this is bad not all shapes are 3-D
	}
Rectification:
	class Shape2D: public Shape{
		int area() = 0;
	}

	class Shape3D: public Shape{
		int area() = 0;
		int volume() = 0; => seperate interface for 3D obj
	}
	class Circle: public Shape{
		//
	}

5. Dependency inversion principle - Entities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module, but they should depend on abstractions.
Dependency injection is basically providing the objects that an object needs (its dependencies) instead of having it construct them itself. => Never create it in constructor instead let users pass it.[IMP]
It's a very useful technique for testing, since it allows dependencies to be mocked or stubbed out.Dependencies can be injected into objects by many means (such as constructor injection or setter injection).One can even use specialized dependency injection frameworks (e.g. Spring) to do that, but they certainly aren't required. You don't need those frameworks to have dependency injection. Instantiating and passing objects (dependencies) explicitly is just as good an injection as injection by framework.[IMP]

public SomeClass() { => Don't instantiate dependent object yourself in Ctor let client pass it
    myObject = Factory.getObject();
}

Problem: If myObject involves complex tasks such as disk access or network access, it is hard to do unit test on SomeClass(). Programmers have to mock myObject and might intercept the factory call.

public SomeClass (MyClass myObject) { => mocked object passed
    this.myObject = myObject;
}

OOD - Cracking the coding interview
-----------------------------------
1. Handle Ambiguity - Who, What, How, When, Where
2. Define Core Object
3. Handle relationship
4. Analyze function - Walk through key item add anything if needed.


OOD - Coursera:
---------------
Customers often don't know what they want key - you have to ask question & lead them there in time - Interview aspect.
Study of boxes(what's in them) & lines(how they are related).
>>Think of designs are actually views/indexes on the code.[IMP]
Approach - Keep it simple.

Requirement in terms of user stories
1. As a ______, I want to ______ so that ______.
You can apply object-oriented thinking to it to discover objects and possibly further requirements!
Usually, the nouns correspond to objects in your software. Verbs can help you identify the requirements that your objects might have.  Verbs may also help you identify connections between objects.

Functional Requirements - what system does? - must be implemented
Non-Functional Requirements - How it works in different situations? - Availability/Performance/Scalability - which are mostly competing.

For conceptual design use CRC for before drawing High Level Component and connections.
			Class
Responsibility | Collaborator

#-------------------------
Different types of objects:
1. Entity objects:  correspond to some real-world entity in the problem space.you will initially get entity objects during component breakdown to technical design.
2. Boundary objects: Interact with other system.
3. Control objects: Receives events and co-ordinates - like scheduler

Organizing your software into entity objects, boundary objects, and control objects.

Abstraction 
Encapsulation
Decomposition - Breaking into smaller parts based on
	1. Fixed(Compose) or Dynamic(aggregate)
	2. Lifetime(compose/aggregate based on tied life cycle)
	3. sharing(compose/aggregate/associate based on sharing)

3 relationship in decomposition:
1.Association - "Some loose" relationship like class using method from another class. Person - Airline(Independently exciting but they interact during journey) 
2.Aggregation 
3.Composition

Matrix to evaluate design complexity.
1. Coupling :- Complexity for connecting module & other module.
If a module highly relies on the other module, it's highly coupled.
Puzzle pieces vs Lego Pieces.
Evaluating coupling:
	1. Degree - No of connection between module.
	2. Ease - Connection should be easy to make without understanding the implementation of other module.
	3. Flexibility - How interchangeable the other module are for the module using it.

2. Cohesion :- Complexity within the module. Represents clarity of responsibilities of module. - like performing one task per function/module.

There is always balance to be made between coupling & cohesion.
For a complex system - Distributing the responsibiity between the module increases coupling & within the module increases cohesion.

Software design:- Guides the design of software running as single process.
Software Architecture:- Software running as multiple process work together and how they relate to each other.