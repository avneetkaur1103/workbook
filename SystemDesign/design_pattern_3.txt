Behavioral design patterns:
---------------------------
These design patterns are all about Class's objects communication. Behavioral patterns are those patterns that are most specifically concerned with communication between objects.

1. Observer Design Pattern:
------------------------
Intent
------
1. Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
2. Encapsulate the core (or common or engine) components in a Subject abstraction, and the variable (or optional or user interface) components in an Observer hierarchy.
3. The "View" part of Model-View-Controller.

	class AlarmListener
	{
	  public:
	    virtual void alarm() = 0;
	};

	class SensorSystem
	{
	    vector < AlarmListener * > listeners;
	  public:
	    void register(AlarmListener *al)
	    {
	        listeners.push_back(al);
	    }
	    void soundTheAlarm()
	    {
	        for (int i = 0; i < listeners.size(); i++)
	          listeners[i]->alarm();
	    }
	};

	class Lighting: public AlarmListener
	{
	  public:
	    void alarm()
	    {
	        cout << "lights up" << '\n';
	    }
	};

	class Gates: public AlarmListener
	{
	  public:
	    void alarm()
	    {
	        cout << "gates close" << '\n';
	    }
	};


	int main()
	{
	  SensorSystem ss;
	  ss.attach(&Lighting());
	  ss.attach(&Gates());
	  ss.soundTheAlarm();
	}

2.State Design Pattern:
-----------------------
Intent
-------
1. Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.
2. An object-oriented state machine
3. wrapper + polymorphic wrappee + collaboration

Problem
--------
A monolithic object's behavior is a function of its state, and it must change its behavior at run-time depending on that state. Or, an application is characterized by large and numerous case statements that vector flow of control based on the state of the application.

Implementation/Extras:
----------------------
The State pattern is a solution to the problem of how to make behavior depend on state.

1. Define a "context" class to present a single interface to the outside world.
2. Define a State abstract base class.
3. Represent the different "states" of the state machine as derived classes of the State base class.
4. Define state-specific behavior in the appropriate State derived classes.
5. Maintain a pointer to the current "state" in the "context" class.
To change the state of the state machine, change the current "state" pointer.

	class Machine
	{
	  class State *current;
	  public:
	    Machine(){ current = new OFF(); };
	    void setCurrent(State *s)
	    {
	    	delete current;
	        current = s;
	    }
	    void on(){ currnt->on(this); }
	    void off{ currnt->off(this); }
	};

	class State
	{
	  public:
	    virtual void on(Machine *m) = 0;
	    virtual void off(Machine *m) = 0;
	};

	class ON: public State
	{
	  public:
	    void off(Machine *m){ // imp to pass the context to modify state
			cout << "   going from ON to OFF";
			m->setCurrent(new OFF());
			delete this;
		}
		void on(Machine *m){}
	};

	class OFF: public State
	{
	  public:
	    void on(Machine *m)
	    {
	        cout << "   going from OFF to ON";
	        m->setCurrent(new ON());
	        delete this;
	    }
	    void off(Machine *m){}
	};

	int main()
	{
		void(Machine:: *ptrs[])() = { Machine::off, Machine::on };
		Machine fsm;
		int num;
		while (1)
		{
			cout << "Enter 0/1: ";
			cin >> num;
			(fsm. *ptrs[num])();
		}
	}

3. Strategy Design Pattern
--------------------------
Intent
------
1. Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from the clients that use it.

Implementation/Extras
---------------------
1.Identify an algorithm (i.e. a behavior) that the client would prefer to access through a "flex point".
2. Specify the signature for that algorithm in an interface.
3. Bury the alternative implementation details in derived classes.
4. Clients of the algorithm couple themselves to the interface.

	class CompressionStrategy {
	  public void compressFiles(List<File> files) = 0;
	};

	class ZipCompressionStrategy : public CompressionStrategy {
	  	void compressFiles(List<File> files) {
	    // use the ZIP strategy to compress the files
	  }
	};

	class RarCompressionStrategy: public CompressionStrategy {
	  	void compressFiles(List<File> files) {
	    // use the RAR strategy to compress the files
	  }
	};

	class Compressor {
		private:
	      CompressionStrategy* strategy;

	      void setCompressionStrategy(CompressionStrategy* strategy) { => Add it on the go
	            this.strategy = strategy;
	      }
	  
	      void createArchive(ArrayList<File> files) {
	            strategy->compressFiles(files);
	      }
	};

Questions: 
1. Strategy vs Bridges?
2. CoR vs Decorator
