static store instantiation - Local when control passes for the 1st time.
Global & class member - before main()

Can't overload below opr:
. / :: /.*
They take name rather than value as their 2nd operand and provide primary means to refering members.

overload operator functions -> Can be - Non-static as member function / Non-member function
=/[]/()/-> must be a non-static member => ensures first operand to be a l-value

Postfix non member takes refrence to self as 1st arg - 
x operator++(x&, int) -> because needs to modify member
X* operator&() -> prefix addressof oprator
X oprator&(X) -> binary bitwise &

# ------------ #----------- # ----------------
For a binary operator @, x @y where x is of type X and y is of type Y is resolved like this:
[1] If X is a class, determine whether class X or a base of X defines operator @ as a member; if
so, that is the @ to try to use.
[2] Otherwise,
– look for declarations of @ in the context surrounding x @y ; and
– if X is defined in namespace N , look for declarations of @ in N ; and
– if Y is defined in namespace M , look for declarations of @ in M .
# ------------ #----------- # ----------------

No implicit conversion is applied to left of ./->

Only one level of implicit conversion is legal.
User defined conversions:
The istream and ostream types rely on a conversion function to enable statements such as:
while (cin >>x ) cout<<x ;

It follows that a friend function should either be explicitly declared in an enclosing scope or take an argument of its class. If not, the friend cannot be called.

void g(); // X’s friend
class X {
friend void f(); // useless
friend void g();
friend void h(const X &); // can be found through its argument
};
void f() { /* ... */ } // not a friend of X
Consequently, binary operators are the most common source of friend functions.

The second argument (the subscript) of an operator [] function may be of any type. => String as key in associative containers.

The dereferencing operator -> can be defined as a unary postfix operator. => X* operator->(); => return pointer to held object. Operator -> must be a member function. If used, its return type must be a pointer or an object of a class to which you can apply ->.

void f(Ptr p )
{
	p->m = 7 ; //(p.operator–>())–>m = 7 [IMP]
}

In general,
if a class Derived has a public base class Base, then a Derived * can be assigned to a variable of type Base* without the use of explicit type conversion. The opposite conversion, from Base* to Derived*, must be explicit.

Default constructors can be invoked implicitly. However, if all constructors for a base require arguments, then a constructor for that base must be explicitly called.

Class objects are constructed from the bottom up: first the base, then the members, and then the derived class itself. They are destroyed in the opposite order

# ------------ #----------- # ----------------
void f (const Manager & m )
{
	Employee e = m ; // construct e from Employee part of m
	e = m ; // assign Employee part of m to e
}

Because the Employee copy functions do not know anything about Managers, only the Employee
part of a Manager is copied. This is commonly referred to as slicing and can be a source of surprises and errors. One reason to pass pointers and references to objects of classes in a hierarchy is to avoid slicing. Other reasons are to preserve polymorphic behavior and to gain efficiency.
# ------------ #----------- # ----------------
The keyword virtual indicates that a function can act as an interface to the function defined in this class and the functions defined in classes derived from it.

Templates
---------
Templates provide direct support for generic programming that is, programming using types as parameters. The C++ template mechanism allows a type to be a parameter in the definition of a class or a function.

The template class C prefix specifies that a template is being declared and that a type argument C will be used in the declaration.

typedef basic_string<char> string => typedef allows us to hide the fact that a type is generated from a template.

Members of a template class are themselves templates parameterized by the parameters of their template class.
template<class C> 
String<C>::String() => member constructor

A version of a template for a particular template argument is called a specialization.

A template can take type parameters, parameters of ordinary types such as ints, and template parameters.It should be compile time deducible like - constant expression/val, the address of an object or function with external linkage(static function), or a non-overloaded pointer to member(same generated class).

When a template function is called, the types of the function arguments determine which version of the template is used => When a template function is called, the types of the function arguments determine which version of the template is used.
If a template argument cannot be deduced from the template function arguments (§C.13.4), we must specify it explicitly:

template<class T, class U> T implicit_cast(U u){return u;}
implicit_cast(i) 			//error: can’t deduce T
implicit_cast<double>(i) 	//T is double U in int

One can declare several function templates with the same name and even declare a combination of function templates and ordinary functions with the same name. => If two template functions can be called and one is more specialized than the other consider only the most specialized template function in the following steps.

If a function and a specialization are equally good matches, the function is preferred. Consequently, sqrt(double) is preferred over sqrt<double>(double) for sqr(2.0) .

If a template function argument has been determined by template argument deduction that argument cannot also have promotions, standard conversions, or user-defined conversions applied. see below.
template<typename T> T max(T, T);
max(2.7, 4) //ambiguous
max<double>(2.7,4) => //max<double>(2.7, double(4)) works

Template agrument to specify predicate => to use static member func/non-member function(templatized or not)

template<class T, class C=Cmp<T>> => class C=Cmp<T> is the default template param to specify policy of comparison which has 2 static func Cmp<T>::eq & Cmp<T>::lt

Template Specialization:
alternative definitions of the template and having the compiler choose between them based on the template arguments provided called user-defined specializations.

template<> class Vector<void*>{ => complete specialization no agument deduction called for vector<void*> vpv
	void p
	//...
	void* operator[] (int i);
}

template<class T> class Vector<T*>:: private Vector<void*>{ => partial initialization called for any pointer type like vector<Shape*> / vector<int**>
	public:
	typedef Vector<void*> Base
	Vector(): Base(){}
	explicit Vector(int i): Base(i){}
	T*& elem(int i){ return static_cast<T*&> Base::elem(i);}
	T*& operator(int i) {return static_cast<T*&>(Base::operator[](i))};
	//...
}

The general template must be declared before any specialization.The critical information supplied by the general template is the set of template parameters that the user must supply to use it or any of its specializations.

template<class T> class List{ //...}
List<int> li
template<class T> class List <T*> {//...} //error specialization declared after use. :(

All specializations of a template must be declared in the same namespace as the template itself

Function template specialization:
template<class T> bool less(T a, T b){return a < b; }
							| t specialized for char*
template<> bool less(const char* a, const char* b){return a < b; } or,

template<> bool less<const char*>(const char* a, const char* b){return a < b; }

virtual functions provide is called run-time polymorphism, and what templates offer is called compile-time polymorphism or parametric polymorphism.If no hierarchical relationship is required between these objects, they are best used as template arguments. If the actual types of these objects cannot be known at compile-time, they are best represented as classes derived from a common abstract class.

Comparator for c++ sort:
true for less & eq => No change
false for greater => swap

In C++ input and output is performed in the form of sequence of bytes or more commonly known as streams.
ofstream os("file.txt")
ifstream is("file.txt")

is >> n
while(is) // works when last read(above) was success-full. initially the fail bit is unset, so applying it without a previous read is faulty.
string line;
getline(is, line) => leading and trailing whitespace are kept until \n. \n is read but not included in target str.
cin >> line // leading ws is igored | trailing ws is left in the stream 
cin.get(ch) // get any char including ws

Stream Iterators allow us access to all the powerful STL algorithms like for_each, replace_if which take an input range to operate on.
A particularly useful function is the copy() function. 

    vector<string> strings_v; 
    ifstream fin("input_file.txt"); 
    istream_iterator<string> fin_it(fin); // can be any istream
    istream_iterator<string> eos; // stream Iterators stop only if eos encountered not on ws
    ostream_iterator<string> cout_it(cout, " "); " " -> separator
    copy(fin_it, eos, back_inserter(strings_v)); 
    sort(strings_v.begin(), strings_v.end()); 
    copy(strings_v.begin(), strings_v.end(), cout_it); 
 
getline(cin, str);
istringstream ss(str); => preferably used together to use stream Iterators

srand(time(NULL)); // NULL = 0 current time

Names in the expression-list of a mem-initializer are evaluated in the scope of the constructor for which the mem-initializer is specified.
Blah(std::vector<int> vec): vec(vec){} => legal

Are you allowed to have a static const member function? Explain your answer => No
A const member function is one which isn’t allowed to modify the members of the object for which it is called. A static member function is one which can’t be called for a specific object.
Thus, the const modifier for a static member function is meaningless, because there is no object associated with the call.

A class that specifies the life and scope of its variables and functions is called a storage class.
In C++ following the storage classes are supported: auto, static, register, extern, and mutable.

Using an extern "C" declaration:

How can a C function be called in a C++ program?
	//C code
	void func(int i)
	{
		//code
	}

	void print(int i)
	{
		//code
	}
	//C++ code
	extern "C"{
	void func(int i);
	void print(int i);
	}

	void myfunc(int i)
	{
	   func(i);
	   print(i);
	}

Although a function is defined as Inline, it is completely compiler dependent to evaluate it as inline or not.

Each class has its own constructors and destructors. The derived class also does not inherit the assignment operator of the base class and friends of the class. 
# ------------ #----------- # ----------------
Smart pointer:
auto_ptr<T>:
------------
This class template is deprecated as of C++11. unique_ptr is a new facility with a similar functionality, but with improved security.auto_ptr is most charitably characterized as a valiant attempt to create a unique_ptr before C++ had move semantics.
The copy constructor and the assignment operator of auto_ptr do not actually copy the stored pointer instead they transfer it,
leaving the first auto_ptr object empty. This was one way to implement strict ownership so that only one auto_ptr object can own the pointer at any given time
	int main() 
	{ 
	    // p1 is an auto_ptr of type A 
	    auto_ptr<A> p1(new A); 
	    p1->show(); 
	  
	    // returns the memory address of p1 
	    cout << p1.get() << endl; 
	  
	    // copy constructor called, this makes p1 empty. 
	    auto_ptr<A> p2(p1); 
	    p2->show(); 
	  
	    // p1 is empty now 
	    cout << p1.get() << endl; 
	  
	    // p1 gets copied in p2 
	    cout << p2.get() << endl; 
	  
	    return 0; 
	}

unique_ptr<T>:
--------------
std::unique_ptr was developed in C++11 as a replacement for std::auto_ptr.
unique_ptr should be the default smart pointer used by new C++ code, replacing "raw" pointers as much as possible.
unique_ptr cleanly represents the single ownership idiom - it cannot be copied(but moved) and assigned, and it cleans up the pointed object when it's destructed.
use unique_ptr by default and switching to shared_ptr if the need arises.

int main(int argc, char** argv) {

    {
        unique_ptr<Foo> fp(new Foo());

        unique_ptr<Foo> fp2(fp);    // ERROR! can't copy unique_ptr
        unique_ptr<Foo> fp3;
        fp3 = fp;                   // ERROR! can't assign unique_ptr
        fp3 = std::move(fp); 		// OK

    }

Iterating over container of unique pointer: Use reference auto& to avoid copying unique_ptr
	std::vector< std::unique_ptr< YourClass >> pointers;
	for( auto&& pointer : pointers ) {
	    pointer->functionOfYourClass();
	}


shared_ptr<T>:
--------------
A shared_ptr is a container for raw pointers. It is a reference counting ownership model i.e. it maintains the reference count of its contained pointer in cooperation with all copies of the shared_ptr.
	int main(){
		shared_ptr<A> p1(new A); 
	    cout << p1.get() << endl; 
	    shared_ptr<A> p2(p1); 
	    cout << p1.use_count() << endl; 	// => 2
	}

weak_ptr<T>:
------------
A weak_ptr is created as a copy of shared_ptr. It provides access to an object that is owned by one or more shared_ptr instances but does not participate in reference counting.
The existence or destruction of weak_ptr has no effect on the shared_ptr or its other copies. It is required in some cases to break circular references between shared_ptr instances.
use when:
When you do want to refer to your object from multiple places – for those references for which it’s ok to ignore and deallocate (check for null, when you try to dereference).

Iterrat