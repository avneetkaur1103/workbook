Check divisibility in a binary stream:(regular method causes overflow for big stream)
only raminder needs to be maintained => (mx)%n = (xan)%n + (xr)%n = 0 + (xr)%n = (xr)%n;
# -----------------
count numbers that dont contain 3
'msd' --> the most significant digit in n 
'd'   --> number of digits in n.
count(n) = n if n < 3
count(n) = n - 1 if 3 <= n  10 and msd is not 3
count(n) = count( msd * (10^(d-1)) - 1) if n > 10 and msd is 3
# -----------------
The sieve of Eratosthenes is one of the most efficient ways to find all primes smaller than n when n is smaller than 10 million or so
for (int p=2; p*p<=n; p++) 
{ 
 	if (prime[p] == true) 
    { 
       for (int i=p*p; i<=n; i += p) 
       prime[i] = false; 
    } 
}
count(&prime[2], &prime[n], true)
# ------------------
