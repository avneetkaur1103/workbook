n-th catalan number.
   T(n) = (2n)! / (n+1)!n! => [0,n-1]sum(T(i)*T(n-i-1))

Masters Theorem:
https://www.geeksforgeeks.org/analysis-algorithm-set-4-master-method-solving-recurrences/
T(n) = aT(n/b) + f(n) |Where b>1 and a>=1
There are following three cases:
1. If f(n) = Θ(n^c) where c < Log(b)a then T(n) = Θ(n^Log(b)a) => sum of const work @ leaves #leaves = n^log(b)a
2. If f(n) = Θ(n^c) where c = Log(b)a then T(n) = Θ(n^c*Log n)
3.If f(n) = Θ(n^c) where c > Log(b)a then T(n) = Θ(f(n)) => work @ root

It is not possible to construct a general Binary Tree from preorder and postorder traversals.

Minimum number of swaps required to sort an array => Swap position graph can be visualized as many non intersection swap circle.

From inorder & postorder to tree => reverse-preoder(postorder) order is taken as guide (left-right-root) & in-order is used in partition & return left & right sets(unorder, guides by postorder to place values in right place)

From inorder & levelorder to tree => level order is taken as structure guide(root- left - right ) & in-order is used in partition & return left & right sets(unorder, guides by intersection(levelorder,left subset){only the levels in left} and intersection(levelorder,right subset){only the levels in right} to place values in right place)[Unclear]

Given an arbitrary binary tree, convert it to a binary tree that holds Children Sum Property:
if diff is 0 then nothing needs to be done.
If diff > 0 ( node’s data is smaller than node’s children sum) increment the node’s data by diff.
If diff < 0 (node’s data is greater than the node's children sum) then increment one child’s data.

Given two binary trees, check if the first tree is subtree of the second one. 
Tree S is a subtree of T if both inorder and preorder traversals of S are substrings of inorder and preorder traversals of T respectively.
Can also be done like checking substring of seralized tree string.

Iterative function to check if two trees are identical.
Use level order traversal. We traverse both trees simultaneously and compare the data whenever we dequeue and [item from queue(imp)].

https://www.geeksforgeeks.org/print-middle-level-perfect-binary-tree-without-finding-height/

Check if a Binary Tree contains duplicate subtrees of size 2[Non-leaf] or more => can be used in compression
The idea is to serialize subtrees as strings and store the strings in hash table. Once we find a serialized tree (which is not a leaf) already existing in hash-table, we return true. # pre-order uniquely represent a full binary tree / can reconstruct tree / can be used in encoding too

If we take few examples, we can notice that the value of h in a complete binary tree is ceil(log2(N+1)) – 1.

A succinct encoding of Binary Tree takes close to minimum possible space. The number of structurally different binary trees on n nodes is n’th Catalan number. For large n, this is about 4n; thus we need at least about log2 4 n = 2n bits to encode it. A succinct binary tree therefore would occupy 2n+o(n) bits.

To create a tree we need root and left - right partiontion nicely done with 
inorder -> partition
preorder/postorder -> roots
In case of succint encoding we can take this in account and encode root and partition togather in a full binary tree structure.