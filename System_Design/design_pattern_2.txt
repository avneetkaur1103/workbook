Structural design patterns
These design patterns are all about Class and Object composition.

1.Adapter Design Pattern:
-------------------------
Intent:
Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.
Wrap an existing class with a new interface.

Problem:
An "off the shelf" component offers compelling functionality that you would like to reuse, but its "view of the world" is not compatible with the  architecture of the system currently being developed.

Solution:
	1. Identify the players: the component(s) that want to be accommodated (i.e. the client), and the component that needs to adapt (i.e. the adaptee).
	2. Identify the interface that the client requires.
	3. Design a "wrapper" class that can "impedance match" the adaptee to the client.
	4. The adapter/wrapper class "has a" instance of the adaptee class.
	5. The adapter/wrapper class "maps" the client interface to the adaptee interface.

	class RectangleAdapter: public Rectangle, private LegacyRectangle  //=> private adabptee[IMP]
	{
	  public:
	    RectangleAdapter(Coordinate x, Coordinate y, Dimension w, Dimension h):
	      LegacyRectangle(x, y, x + w, y + h)
	    {
	        cout << "RectangleAdapter: create.  (" << x << "," << y << 
	          "), width = " << w << ", height = " << h << endl;
	    }
	    virtual void draw()
	    {
	        cout << "RectangleAdapter: draw." << endl;
	        oldDraw(); // => one of the method mapping from current interface to adaptee interface
	    }
	};

2.Bridge Design Pattern
-----------------------
Intent:
-------
Decouple an abstraction from its implementation so that the two can vary independently.
Publish interface in an inheritance hierarchy, and bury implementation in its own inheritance hierarchy.
Beyond encapsulation, to insulation

Problem:
-------
"Hardening of the software arteries" has occurred by using subclassing of an abstract base class to provide alternative implementations. This locks in compile-time binding between interface and implementation[IMP]. The abstraction and implementation cannot be independently extended or composed.

Use the Bridge pattern when:
you want run-time binding of the implementation => Main purpose
you have a proliferation of classes resulting from a coupled interface and numerous implementations,
you want to share an implementation among multiple objects,

	class DrawAPI {
	   void drawCircle(int radius, int x, int y) = 0;
	}

	class RedCircle: public DrawAPI {
	   void drawCircle(int radius, int x, int y) {
	      System.out.println("Drawing Circle[ color: red, radius: " + radius + ", x: " + x + ", " + y + "]");
	   }
	}

	class GreenCircle:public DrawAPI {
	   void drawCircle(int radius, int x, int y) {
	      System.out.println("Drawing Circle[ color: green, radius: " + radius + ", x: " + x + ", " + y + "]");
	   }
	}

	class Shape {
	   protected:
		   DrawAPI* drawAPI;
		   Shape(DrawAPI* drawAPI){
		      this.drawAPI = drawAPI;
		   }
	   public:
			abstract void draw() = 0;	
	}

	class Circle: Shape {
	   int x, y, radius;

	   Circle(int x, int y, int radius, DrawAPI drawAPI) {
	      super(drawAPI);
	      this.x = x;  
	      this.y = y;  
	      this.radius = radius;
	   }

	   void draw() {
	      drawAPI.drawCircle(radius,x,y);
	   }
	}

	int main{
		Shape redCircle = new Circle(100,100, 10, new RedCircle());  // => Dynamically pushed implementaion
	    Shape greenCircle = new Circle(100,100, 10, new GreenCircle());

	    redCircle.draw();
	    greenCircle.draw();
	}

3.Composite Design Pattern:
---------------------------
Intent
------
Compose objects into tree structures to represent whole-part hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.
Recursive composition
"Directories contain entries, each of which could be a directory."
1-to-many "has a" up the "is a" hierarchy

Problem
-------
Application needs to manipulate a hierarchical collection of "primitive" and "composite" objects. Processing of a primitive object is handled one way, and processing of a composite object is handled differently. Having to query the "type" of each object before attempting to process it is not desirable.

Useage Guide:
-------------
1. Consider the heuristic, "Containers that contain containees, each of which could be a container." For example, "Assemblies that contain components, each of which could be an assembly." Divide your domain concepts into container classes, and containee classes.
2. Create a "lowest common denominator" interface that makes your containers and containees interchangeable. It should specify the behavior that needs to be exercised uniformly across all containee and container objects.
3. All container and containee classes declare an "is a" relationship to the interface.
4. All container classes declare a one-to-many "has a" relationship to the interface.
5. "Container" classes use polymorphism as they delegate to their children

Implementation/Extras:
---------------
1. Composite doesn't force you to treat all Components as Composites. It merely tells you to put all operations that you want to treat "uniformly" in the Component class. If add, remove, and similar operations cannot, or must not, be treated uniformly, then do not put them in the Component base class.
2. When given a base class pointer, if I absolutely need to know whether or not it is a Composite, I will use dynamic_cast to figure this out. In those cases where dynamic_cast is too expensive, I will use a Visitor.
	class Component
	{
	  public:
	    virtual void traverse() = 0;
	};

	class Leaf: public Component
	{
	    // 1. Scalar class   3. "isa" relationship
	    int value;
	  public:
	    Leaf(int val)
	    {
	        value = val;
	    }
	    void traverse()
	    {
	        cout << value << ' ';
	    }
	};

	class Composite: public Component
	{
	    // 1. Vector class   3. "isa" relationship
	    vector < Component * > children; 	// 4. "container" coupled to the interface
	  public:
	    void add(Component *ele)	// 4. "container" class coupled to the interface
	    {
	        children.push_back(ele);
	    }
	    void traverse()
	    {
	        for (int i = 0; i < children.size(); i++)
	          children[i]->traverse();	// 5. Use polymorphism to delegate to children
	    }
	};

	int main()
	{
	  Composite containers[4];

	  for (int i = 0; i < 4; i++)
	    for (int j = 0; j < 3; j++)
	      containers[i].add(new Leaf(i *3+j));

	  for (i = 1; i < 4; i++)
	    containers[0].add(&(containers[i]));

	  for (i = 0; i < 4; i++)
	  {
	    containers[i].traverse();
	    cout << endl;
	  }
	}

4. Decorator Design Pattern:
-------------------------
Intent
------
Attach additional responsibilities to an object & it's method dynamically. => [Decorators provide a flexible alternative to subclassing for extending functionality.]

Problem
------
You want to add behavior or state to individual objects at run-time. Inheritance is not feasible because it is static and applies to an entire class.

Implementation Checklist/Extras:
--------------------------------
1. Ensure the context is: a single core (or non-optional) component, several optional embellishments or wrappers, and an interface that is common to all.
2. Create a "Lowest Common Denominator" interface that makes all classes interchangeable.

	class Window: public Wizard{		//Core Wizard
		void draw() = 0;
	};

	class Decorator: public Wizard{};			//optional wizard decorator base
	class BorderDecorator: public Decorator{	//wizard decorators
		Wizard* decoratee;
		void draw(){
			// operation specific to this decorator
			decoratee->draw();
		}
	};

	Widget* aWidget = new BorderDecorator(
	  new HorizontalScrollBarDecorator(
	    new VerticalScrollBarDecorator( 	//wizard decorators
	      new Window( 80, 24 )))); 		//Core wizard
	aWidget->draw();

5. Facade Design Pattern
------------------------
Intent:
-------
Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.
Wrap a complicated subsystem with a simpler interface.

Problem:
--------
[A segment] of the client community needs a simplified interface to the overall functionality of a complex subsystem.

Note: Facade defines a new interface, whereas Adapter uses an old interface. Remember that Adapter makes two existing interfaces work together as opposed to defining an entirely new one. => Adapter wraps one class and the Facade may represent many classes? => No both can take as many class to fulfill their intent.

	class SocialSharing {
	  void shareUrl(String url) {
	    facebookApi.share(url);
	    twitterClient.post(url);
	    LinkedInClient.createPost(url);
	  }
	}

	class Client {
	  // ...
	  socialSharing.shareUrl("http://medium.com");
	  // ...
	}

6. Flyweight Design Patter:
------------------------
The Flyweight pattern is applied if lots of objects from one class need to be constructed. In this case objects are shared to reduce the memory load.

Problem
Designing objects down to the lowest levels of system "granularity" provides optimal flexibility, but can be unacceptably expensive in terms of performance and memory usage.

7. Proxy Design Pattern:
---------------------
Intent:
------
Provide a surrogate or placeholder for another object to control access to it.
Use an extra level of indirection to support distributed, controlled, or intelligent access.
Add a wrapper and delegation to protect the real component from undue complexity.

Problem:
--------
You need to support resource-hungry objects, and you do not want to instantiate such objects unless and until they are actually requested by the client.

4 common situations in which the Proxy pattern is applicable.
--------------------------------------------------------------
1. A virtual proxy is a placeholder for "expensive to create" objects. The real object is only created when a client first requests/accesses the object.
2. A remote proxy provides a local representative for an object that resides in a different address space. This is what the "stub" code in RPC and CORBA provides.
3. A protective proxy controls access to a sensitive master object. The "surrogate" object checks that the caller has the access permissions required prior to forwarding the request.
4. A smart proxy interposes additional actions when an object is accessed. Typical uses include:
	1. Counting the number of references to the real object so that it can be freed automatically when there are no more references (aka smart pointer),
	2. Loading a persistent object into memory when it's first referenced,
	3. Checking that the real object is locked before it is accessed to ensure that no other object can change it.

Implementation/Extras:
----------------------
1. Identify the leverage or "aspect" that is best implemented as a wrapper or surrogate.
2. Define an interface that will make the proxy and the original component interchangeable.
3. Consider defining a Factory that can encapsulate the decision of whether a proxy or original object is desirable.

	Example: modified behavior for -> & *
	class Subject
	{
	  	public:
	    	virtual void execute() = 0;
	};

	class RealSubject: public Subject
	{
	    string str;
	  	public:
		    RealSubject(string s): str{s}{}
		    void execute(){ // DO something }
	};

	class ProxySubject: public Subject
	{
	    string first, second, third;
	    RealSubject *ptr;
	  public:
	    ProxySubject(string s)
	    {
	        ptr = new RealSubject(s);
	    }
	    ~ProxySubject()
	    {
	        delete ptr;
	    }
	    RealSubject *operator->()
	    {
	        cout << "This is ->";
	        return ptr;
	    }
	    void execute()
	    {
	        cout << "This is *";
	        ptr->execute();
	    }
	};

	int main()
	{
	  ProxySubject obj(string("the quick brown fox jumped over the dog"));
	  obj->execute();
	  obj.execute();
	}
